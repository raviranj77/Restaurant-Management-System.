--- FIRST OF ALL CREATE TABLE RESTAURANTS, MENU, CUSTOMERS, ORDERS, REVIEWS ---

CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY IDENTITY(1,1),
    Name VARCHAR(100),
    Location VARCHAR(100),
    CuisineType VARCHAR(50),
    Rating DECIMAL(2, 1)
);
CREATE TABLE Menu (
    MenuID INT PRIMARY KEY IDENTITY(1,1),
    RestaurantID INT,
    DishName VARCHAR(100),
    Price DECIMAL(10, 2),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY IDENTITY(1,1),
    Name VARCHAR(100),
    Email VARCHAR(100),
    PhoneNumber VARCHAR(15)
);
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY IDENTITY(1,1),
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY IDENTITY(1,1),
    CustomerID INT,
    RestaurantID INT,
    Rating DECIMAL(2, 1),
    ReviewText TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);
---INSERT VALUE INTO THE TABLE ---


INSERT INTO Restaurants (Name, Location, CuisineType, Rating)
VALUES 
    ('Spicy Bite', 'Mumbai', 'Indian', 4.5),
    ('Sushi World', 'Delhi', 'Japanese', 4.7),
    ('Pasta Palace', 'Bangalore', 'Italian', 4.2);

	INSERT INTO Menu (RestaurantID, DishName, Price)
VALUES 
    (1, 'Paneer Butter Masala', 250.00),
    (1, 'Butter Naan', 50.00),
    (2, 'California Roll', 300.00),
    (3, 'Sp
	aghetti Carbonara', 400.00);

	INSERT INTO Customers (Name, Email, PhoneNumber)
VALUES 
    ('Ravi Kumar', 'ravi@example.com', '9876543210'),
    ('Priya Sharma', 'priya@example.com', '9123456789');

	INSERT INTO Orders (CustomerID, RestaurantID, OrderDate, TotalAmount)
VALUES 
    (1, 1, '2024-12-25', 300.00),
    (2, 3, '2024-12-26', 400.00);
	INSERT INTO Reviews (CustomerID, RestaurantID, Rating, ReviewText, ReviewDate)
VALUES 
    (1, 1, 5.0, 'Excellent food and service!', '2024-12-26'),
    (2, 3, 4.0, 'Delicious pasta!', '2024-12-27');

--- SHOW ALL TABLES ---

SELECT * FROM Restaurants;
SELECT * FROM MENU;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;
SELECT * FROM REVIEWS;

--- AFTER CREATING TABLE AND INSERT VALUE NOW WE ANALYSE THE DATA ----

--- (1)  Find the top-rated restaurants---

SELECT TOP 5 Name, Rating
FROM Restaurants
ORDER BY Rating DESC;



---(2) GET THE TOTAL REVENUE OF EACH RESTURANTS---
 
SELECT R.Name, SUM(O.TotalAmount) AS TotalRevenue
FROM Orders O
JOIN Restaurants R ON O.RestaurantID = R.RestaurantID
GROUP BY R.Name
ORDER BY TotalRevenue DESC;


---(3) Most popular dishes by orders---

SELECT M.DishName, COUNT(*) AS OrderCount
FROM Menu M
JOIN Orders O ON M.RestaurantID = O.RestaurantID
GROUP BY M.DishName
ORDER BY OrderCount DESC;


---(4) Average customer rating per restaurant ---

SELECT R.Name, AVG(Reviews.Rating) AS AverageRating
FROM Reviews
JOIN Restaurants R ON Reviews.RestaurantID = R.RestaurantID
GROUP BY R.Name;

---(5) Customer who spent the most ---

SELECT TOP 1 C.Name, SUM(O.TotalAmount) AS TotalSpent
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.Name
ORDER BY TotalSpent DESC;

---(6) Identify High-Performing Restaurants ---

SELECT R.Name, R.Location, 
       AVG(Reviews.Rating) AS AverageRating, 
       SUM(O.TotalAmount) AS TotalRevenue
FROM Restaurants R
JOIN Reviews ON R.RestaurantID = Reviews.RestaurantID
JOIN Orders O ON R.RestaurantID = O.RestaurantID
GROUP BY R.RestaurantID, R.Name, R.Location
HAVING AVG(Reviews.Rating) > 4.5 AND SUM(O.TotalAmount) > 5000
ORDER BY TotalRevenue DESC;

---(7) Analyze revenue trends for each restaurant over the months ---

SELECT R.Name, FORMAT(O.OrderDate, 'yyyy-MM') AS Month, SUM(O.TotalAmount) AS MonthlyRevenue
FROM Orders O
JOIN Restaurants R ON O.RestaurantID = R.RestaurantID
GROUP BY R.Name, FORMAT(O.OrderDate, 'yyyy-MM')
ORDER BY Month, MonthlyRevenue DESC;

---(8) Find customers who have placed the most orders ----

SELECT TOP 5 C.Name, C.Email, COUNT(O.OrderID) AS OrderCount
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.CustomerID, C.Name, C.Email
ORDER BY OrderCount DESC;

---(9) Calculate total revenue generated by each dish ----

SELECT M.DishName, SUM(O.TotalAmount) AS TotalRevenue
FROM Menu M
JOIN Orders O ON M.RestaurantID = O.RestaurantID
GROUP BY M.DishName
ORDER BY TotalRevenue DESC;


---(10) Analyze the distribution of customer ratings ---

SELECT Rating, COUNT(*) AS NumberOfReviews
FROM Reviews
GROUP BY Rating
ORDER BY Rating DESC;

---(11) Analyze which cuisines are most popular in different locations ---

SELECT R.Location, R.CuisineType, COUNT(O.OrderID) AS OrdersCount
FROM Restaurants R
JOIN Orders O ON R.RestaurantID = O.RestaurantID
GROUP BY R.Location, R.CuisineType
ORDER BY OrdersCount DESC;

---(12) Calculate the average spending of each customer ---

SELECT C.Name, AVG(O.TotalAmount) AS AverageSpending
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.CustomerID, C.Name
ORDER BY AverageSpending DESC;

---(13) Identify which dishes are most popular in each location ---

SELECT R.Location, M.DishName, COUNT(O.OrderID) AS OrderCount
FROM Menu M
JOIN Restaurants R ON M.RestaurantID = R.RestaurantID
JOIN Orders O ON M.RestaurantID = O.RestaurantID
GROUP BY R.Location, M.DishName
ORDER BY R.Location, OrderCount DESC;


---(14) Identify customers who have ordered more than once ---

SELECT C.Name, COUNT(DISTINCT O.OrderID) AS TotalOrders
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.CustomerID, C.Name
HAVING COUNT(DISTINCT O.OrderID) > 1
ORDER BY TotalOrders DESC;

---(15) List restaurants with average ratings below --

SELECT R.Name, R.Location, AVG(Reviews.Rating) AS AverageRating
FROM Restaurants R
JOIN Reviews ON R.RestaurantID = Reviews.RestaurantID
GROUP BY R.RestaurantID, R.Name, R.Location
HAVING AVG(Reviews.Rating) < 3
ORDER BY AverageRating ASC;

---(16) Order Cancellation Rate (Optional Table) ---

SELECT R.Name, 
       COUNT(CASE WHEN O.OrderDate IS NULL THEN 1 END) * 100.0 / COUNT(*) AS CancellationRate
FROM Orders O
JOIN Restaurants R ON O.RestaurantID = R.RestaurantID
GROUP BY R.Name
ORDER BY CancellationRate DESC;

---(17) Revenue Contribution by Cuisine Type ---

SELECT R.CuisineType, SUM(O.TotalAmount) AS TotalRevenue
FROM Restaurants R
JOIN Orders O ON R.RestaurantID = O.RestaurantID
GROUP BY R.CuisineType
ORDER BY TotalRevenue DESC;


---(18) Review Sentiment Analysis ---

SELECT R.Name, COUNT(CASE WHEN Reviews.Rating >= 4 THEN 1 END) AS PositiveReviews,
              COUNT(CASE WHEN Reviews.Rating < 4 THEN 1 END) AS NegativeReviews
FROM Restaurants R
JOIN Reviews ON R.RestaurantID = Reviews.RestaurantID
GROUP BY R.Name;


---(19) High-Spending Customers by Restaurant ---

SELECT R.Name AS Restaurant, C.Name AS Customer, SUM(O.TotalAmount) AS TotalSpent
FROM Restaurants R
JOIN Orders O ON R.RestaurantID = O.RestaurantID
JOIN Customers C ON O.CustomerID = C.CustomerID
GROUP BY R.Name, C.Name
ORDER BY TotalSpent DESC;














